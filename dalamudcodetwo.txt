using LibDalamud;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text.Json;
using System.Threading.Tasks;

namespace XIVLauncher.Common.Game
{
    public static class IntegrityCheck
    {
        private const string INTEGRITY_CHECK_BASE_URL = "https://goatcorp.github.io/integrity/";

        public class IntegrityCheckResult
        {
            public Dictionary<string, string> Hashes { get; set; }
            public string GameVersion { get; set; }
            public string LastGameVersion { get; set; }
        }

        public class IntegrityCheckProgress
        {
            public string CurrentFile { get; set; }
        }

        public enum CompareResult
        {
            Valid,
            Invalid,
            ReferenceNotFound,
            ReferenceFetchFailure,
        }

        public static async Task<(CompareResult compareResult, string report, IntegrityCheckResult remoteIntegrity)>
            CompareIntegrityAsync(IProgress<IntegrityCheckProgress> progress, DirectoryInfo gamePath, bool onlyIndex = false)
        {
            IntegrityCheckResult remoteIntegrity;

            try
            {
                remoteIntegrity = DownloadIntegrityCheckForVersion(Repository.Ffxiv.GetVer(gamePath));
            }
            catch (WebException e)
            {
                if (e.Response is HttpWebResponse resp && resp.StatusCode == HttpStatusCode.NotFound)
                    return (CompareResult.ReferenceNotFound, null, null);
                return (CompareResult.ReferenceFetchFailure, null, null);
            }

            var localIntegrity = await RunIntegrityCheckAsync(gamePath, progress, onlyIndex).ConfigureAwait(false);

            var report = "";
            var failed = false;

            foreach (var hashEntry in remoteIntegrity.Hashes)
            {
                if (onlyIndex && (!hashEntry.Key.EndsWith(".index", StringComparison.Ordinal) && !hashEntry.Key.EndsWith(".index2", StringComparison.Ordinal)))
                    continue;

                if (localIntegrity.Hashes.Any(h => h.Key == hashEntry.Key))
                {
                    if (localIntegrity.Hashes.First(h => h.Key == hashEntry.Key).Value != hashEntry.Value)
                    {
                        report += $"Mismatch: {hashEntry.Key}\n";
                        failed = true;
                    }
                }
                else
                {
                    report += $"Missing: {hashEntry.Key}\n";
                }
            }

            return (failed ? CompareResult.Invalid : CompareResult.Valid, report, remoteIntegrity);
        }

        private static IntegrityCheckResult DownloadIntegrityCheckForVersion(string gameVersion)
        {
            using (var client = new WebClient())
            {
                return JsonSerializer.Deserialize<IntegrityCheckResult>(
                    client.DownloadString(INTEGRITY_CHECK_BASE_URL + gameVersion + ".json"));
            }
        }

        public static async Task<IntegrityCheckResult> RunIntegrityCheckAsync(DirectoryInfo gamePath,
                                                                              IProgress<IntegrityCheckProgress> progress, bool onlyIndex = false)
        {
            var hashes = new Dictionary<string, string>();

            using (var sha1 = SHA1.Create())
            {
                CheckDirectory(gamePath, sha1, gamePath.FullName, ref hashes, progress, onlyIndex);
            }

            return new IntegrityCheckResult
            {
                GameVersion = Repository.Ffxiv.GetVer(gamePath),
                Hashes = hashes
            };
        }

        private static void CheckDirectory(DirectoryInfo directory, SHA1 sha1, string rootDirectory,
                                           ref Dictionary<string, string> results, IProgress<IntegrityCheckProgress> progress, bool onlyIndex = false)
        {
            foreach (var file in directory.GetFiles())
            {
                var relativePath = file.FullName.Substring(rootDirectory.Length);

                // for unix compatibility with windows-generated integrity files.
                relativePath = relativePath.Replace("/", "\\");

                if (!relativePath.StartsWith("\\", StringComparison.Ordinal))
                    relativePath = "\\" + relativePath;

                if (!relativePath.StartsWith("\\game", StringComparison.Ordinal))
                    continue;

                if (onlyIndex && (!relativePath.EndsWith(".index", StringComparison.Ordinal) && !relativePath.EndsWith(".index2", StringComparison.Ordinal)))
                    continue;

                try
                {
                    using (var stream =
                           new BufferedStream(file.Open(FileMode.Open, FileAccess.Read, FileShare.ReadWrite), 1200000))
                    {
                        var hash = sha1.ComputeHash(stream);

                        results.Add(relativePath, BitConverter.ToString(hash).Replace('-', ' '));

                        progress?.Report(new IntegrityCheckProgress
                        {
                            CurrentFile = relativePath
                        });
                    }
                }
                catch (IOException)
                {
                    // Ignore
                }
            }

            foreach (var dir in directory.GetDirectories())
            {
                if (!dir.FullName.ToLower().Contains("shade")) //skip gshade directories. They just waste cpu
                    CheckDirectory(dir, sha1, rootDirectory, ref results, progress, onlyIndex);
            }
        }
    }
}   ﻿using LibDalamud;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography;
using System.Text.Json;
using System.Threading.Tasks;

namespace XIVLauncher.Common.Game
{
    public static class IntegrityCheck
    {
        private const string INTEGRITY_CHECK_BASE_URL = "https://goatcorp.github.io/integrity/";

        public class IntegrityCheckResult
        {
            public Dictionary<string, string> Hashes { get; set; }
            public string GameVersion { get; set; }
            public string LastGameVersion { get; set; }
        }

        public class IntegrityCheckProgress
        {
            public string CurrentFile { get; set; }
        }

        public enum CompareResult
        {
            Valid,
            Invalid,
            ReferenceNotFound,
            ReferenceFetchFailure,
        }

        public static async Task<(CompareResult compareResult, string report, IntegrityCheckResult remoteIntegrity)>
            CompareIntegrityAsync(IProgress<IntegrityCheckProgress> progress, DirectoryInfo gamePath, bool onlyIndex = false)
        {
            IntegrityCheckResult remoteIntegrity;

            try
            {
                remoteIntegrity = DownloadIntegrityCheckForVersion(Repository.Ffxiv.GetVer(gamePath));
            }
            catch (WebException e)
            {
                if (e.Response is HttpWebResponse resp && resp.StatusCode == HttpStatusCode.NotFound)
                    return (CompareResult.ReferenceNotFound, null, null);
                return (CompareResult.ReferenceFetchFailure, null, null);
            }

            var localIntegrity = await RunIntegrityCheckAsync(gamePath, progress, onlyIndex).ConfigureAwait(false);

            var report = "";
            var failed = false;

            foreach (var hashEntry in remoteIntegrity.Hashes)
            {
                if (onlyIndex && (!hashEntry.Key.EndsWith(".index", StringComparison.Ordinal) && !hashEntry.Key.EndsWith(".index2", StringComparison.Ordinal)))
                    continue;

                if (localIntegrity.Hashes.Any(h => h.Key == hashEntry.Key))
                {
                    if (localIntegrity.Hashes.First(h => h.Key == hashEntry.Key).Value != hashEntry.Value)
                    {
                        report += $"Mismatch: {hashEntry.Key}\n";
                        failed = true;
                    }
                }
                else
                {
                    report += $"Missing: {hashEntry.Key}\n";
                }
            }

            return (failed ? CompareResult.Invalid : CompareResult.Valid, report, remoteIntegrity);
        }

        private static IntegrityCheckResult DownloadIntegrityCheckForVersion(string gameVersion)
        {
            using (var client = new WebClient())
            {
                return JsonSerializer.Deserialize<IntegrityCheckResult>(
                    client.DownloadString(INTEGRITY_CHECK_BASE_URL + gameVersion + ".json"));
            }
        }

        public static async Task<IntegrityCheckResult> RunIntegrityCheckAsync(DirectoryInfo gamePath,
                                                                              IProgress<IntegrityCheckProgress> progress, bool onlyIndex = false)
        {
            var hashes = new Dictionary<string, string>();

            using (var sha1 = SHA1.Create())
            {
                CheckDirectory(gamePath, sha1, gamePath.FullName, ref hashes, progress, onlyIndex);
            }

            return new IntegrityCheckResult
            {
                GameVersion = Repository.Ffxiv.GetVer(gamePath),
                Hashes = hashes
            };
        }

        private static void CheckDirectory(DirectoryInfo directory, SHA1 sha1, string rootDirectory,
                                           ref Dictionary<string, string> results, IProgress<IntegrityCheckProgress> progress, bool onlyIndex = false)
        {
            foreach (var file in directory.GetFiles())
            {
                var relativePath = file.FullName.Substring(rootDirectory.Length);

                // for unix compatibility with windows-generated integrity files.
                relativePath = relativePath.Replace("/", "\\");

                if (!relativePath.StartsWith("\\", StringComparison.Ordinal))
                    relativePath = "\\" + relativePath;

                if (!relativePath.StartsWith("\\game", StringComparison.Ordinal))
                    continue;

                if (onlyIndex && (!relativePath.EndsWith(".index", StringComparison.Ordinal) && !relativePath.EndsWith(".index2", StringComparison.Ordinal)))
                    continue;

                try
                {
                    using (var stream =
                           new BufferedStream(file.Open(FileMode.Open, FileAccess.Read, FileShare.ReadWrite), 1200000))
                    {
                        var hash = sha1.ComputeHash(stream);

                        results.Add(relativePath, BitConverter.ToString(hash).Replace('-', ' '));

                        progress?.Report(new IntegrityCheckProgress
                        {
                            CurrentFile = relativePath
                        });
                    }
                }
                catch (IOException)
                {
                    // Ignore
                }
            }

            foreach (var dir in directory.GetDirectories())
            {
                if (!dir.FullName.ToLower().Contains("shade")) //skip gshade directories. They just waste cpu
                    CheckDirectory(dir, sha1, rootDirectory, ref results, progress, onlyIndex);
            }
        }
    }
}﻿using System;
using System.Globalization;
using System.Text;
using System.Threading.Tasks;
using LibDalamud;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using XIVLauncher.Common.Util;

namespace XIVLauncher.Common.Game
{
    public partial class Headlines
    {
        [JsonProperty("news")]
        public News[] News { get; set; }

        [JsonProperty("topics")]
        public News[] Topics { get; set; }

        [JsonProperty("pinned")]
        public News[] Pinned { get; set; }

        [JsonProperty("banner")]
        public Banner[] Banner { get; set; }
    }

    public class Banner
    {
        [JsonProperty("lsb_banner")]
        public Uri LsbBanner { get; set; }

        [JsonProperty("link")]
        public Uri Link { get; set; }
    }

    public class News
    {
        [JsonProperty("date")]
        public DateTimeOffset Date { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
        public string Tag { get; set; }
    }

    public partial class Headlines
    {
        public static async Task<Headlines> Get(Launcher game, ClientLanguage language)
        {
            var unixTimestamp = ApiHelpers.GetUnixMillis();
            var langCode = language.GetLangCode();
            var url = $"https://frontier.ffxiv.com/news/headline.json?lang={langCode}&media=pcapp&_={unixTimestamp}";

            var json = Encoding.UTF8.GetString(await game.DownloadAsLauncher(url, language, "application/json, text/plain, */*").ConfigureAwait(false));

            return JsonConvert.DeserializeObject<Headlines>(json, Converter.SETTINGS);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings SETTINGS = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }
}   using System.Collections.Generic;
using Newtonsoft.Json;

namespace XIVLauncher.Common.Game;

public class GateStatus
{
    [JsonProperty("status")]
    public bool Status { get; set; }

    [JsonProperty("message")]
    public List<string> Message { get; set; }

    [JsonProperty("news")]
    public List<string> News { get; set; }
}using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using LibDalamud;
using Newtonsoft.Json;
using Serilog;
using XIVLauncher.Common.Game.Exceptions;
using XIVLauncher.Common.Patching.IndexedZiPatch;
using XIVLauncher.Common.Patching.Util;
using XIVLauncher.Common.PlatformAbstractions;

namespace XIVLauncher.Common.Game.Patch
{
    public class PatchVerifier : IDisposable
    {
        private const string REPAIR_RECYCLER_DIRECTORY = "repair_recycler";

        private static readonly Regex[] GameIgnoreUnnecessaryFilePatterns = new Regex[]
        {
            // Base game version files.
            new Regex(@"^ffxivgame\.(?:bck|ver)$", RegexOptions.IgnoreCase),

            // Expansion version files.
            new Regex(@"^sqpack/ex([1-9][0-9]*)/ex\1\.(?:bck|ver)$", RegexOptions.IgnoreCase),

            // Under WINE, since .dat files are actually WMV videos, the game will become unusable.
            // Bink videos will be used instead in those cases.
            new Regex(@"^movie/ffxiv/0000[0-3]\.bk2$", RegexOptions.IgnoreCase),

            // DXVK can deal with corrupted cache files by itself, so let it do the job by itself.
            new Regex(@"^ffxiv_dx11\.dxvk-cache$", RegexOptions.IgnoreCase),

            // Repair recycle bin folder.
            new Regex(@"^repair_recycler/.*$", RegexOptions.IgnoreCase),

            // Ignore gshade folders. Unless someone wants to handle the symlinked folder, just skip recycling them.
            new Regex(@"^gshade-(shader|preset)s$", RegexOptions.IgnoreCase),
        };

        private readonly ISettings _settings;
        private readonly int _maxExpansionToCheck;
        private readonly bool _external;
        private HttpClient _client;
        private CancellationTokenSource _cancellationTokenSource = new();

        private Dictionary<Repository, string> _repoMetaPaths = new();
        private Dictionary<string, PatchSource> _patchSources = new();

        private Task _verificationTask;
        private List<Tuple<long, long>> _reportedProgresses = new();

        public int ProgressUpdateInterval { get; private set; }
        public int NumBrokenFiles { get; private set; } = 0;
        public string MovedFileToDir { get; private set; } = null;
        public List<string> MovedFiles { get; private set; } = new();
        public int PatchSetIndex { get; private set; }
        public int PatchSetCount { get; private set; }
        public int TaskIndex { get; private set; }
        public long Progress { get; private set; }
        public long Total { get; private set; }
        public int TaskCount { get; private set; }
        public IndexedZiPatchInstaller.InstallTaskState CurrentMetaInstallState { get; private set; } = IndexedZiPatchInstaller.InstallTaskState.NotStarted;
        public string CurrentFile { get; private set; }
        public long Speed { get; private set; }
        public Exception LastException { get; private set; }

        private const string BASE_URL = "https://raw.githubusercontent.com/goatcorp/patchinfo/main/";

        public enum VerifyState
        {
            NotStarted,
            DownloadMeta,
            VerifyAndRepair,
            Done,
            Cancelled,
            Error
        }

        private struct PatchSource
        {
            public FileInfo FileInfo;
            public Uri Uri;
        }

        private class VerifyVersions
        {
            [JsonProperty("boot")]
            public string Boot { get; set; }

            [JsonProperty("bootRevision")]
            public int BootRevision { get; set; }

            [JsonProperty("game")]
            public string Game { get; set; }

            [JsonProperty("gameRevision")]
            public int GameRevision { get; set; }

            [JsonProperty("ex1")]
            public string Ex1 { get; set; }

            [JsonProperty("ex1Revision")]
            public int Ex1Revision { get; set; }

            [JsonProperty("ex2")]
            public string Ex2 { get; set; }

            [JsonProperty("ex2Revision")]
            public int Ex2Revision { get; set; }

            [JsonProperty("ex3")]
            public string Ex3 { get; set; }

            [JsonProperty("ex3Revision")]
            public int Ex3Revision { get; set; }

            [JsonProperty("ex4")]
            public string Ex4 { get; set; }

            [JsonProperty("ex4Revision")]
            public int Ex4Revision { get; set; }
        }

        public VerifyState State { get; private set; } = VerifyState.NotStarted;

        public PatchVerifier(ISettings settings, Launcher.LoginResult loginResult, int progressUpdateInterval, int maxExpansion, bool external = true)
        {
            this._settings = settings;
            _client = new HttpClient();
            ProgressUpdateInterval = progressUpdateInterval;
            _maxExpansionToCheck = maxExpansion;
            _external = external;

            SetLoginState(loginResult);
        }

        public void Start()
        {
            Debug.Assert(_patchSources.Count != 0);
            Debug.Assert(_verificationTask == null || _verificationTask.IsCompleted);

            _cancellationTokenSource = new();
            _reportedProgresses.Clear();
            NumBrokenFiles = 0;
            PatchSetIndex = 0;
            PatchSetCount = 0;
            TaskIndex = 0;
            Progress = 0;
            Total = 0;
            TaskCount = 0;
            CurrentFile = null;
            Speed = 0;
            CurrentMetaInstallState = IndexedZiPatchInstaller.InstallTaskState.NotStarted;
            LastException = null;

            _verificationTask = Task.Run(this.RunVerifier, _cancellationTokenSource.Token);
        }

        public Task Cancel()
        {
            _cancellationTokenSource.Cancel();
            return WaitForCompletion();
        }

        public Task WaitForCompletion()
        {
            return _verificationTask ?? Task.CompletedTask;
        }

        private void SetLoginState(Launcher.LoginResult result)
        {
            _patchSources.Clear();

            foreach (var patch in result.PendingPatches)
            {
                var repoName = patch.GetRepoName();
                if (repoName == "ffxiv")
                    repoName = "ex0";

                _patchSources.Add($"{repoName}:{Path.GetFileName(patch.GetFilePath())}", new PatchSource()
                {
                    FileInfo = new FileInfo(Path.Combine(_settings.PatchPath.FullName, patch.GetFilePath())),
                    Uri = new Uri(patch.Url),
                });
            }
        }

        private bool AdminAccessRequired(string gameRootPath)
        {
            string tempFn;
            do
            {
                tempFn = Path.Combine(gameRootPath, Guid.NewGuid().ToString());
            } while (File.Exists(tempFn));
            try
            {
                File.WriteAllText(tempFn, "");
                File.Delete(tempFn);
            }
            catch (UnauthorizedAccessException)
            {
                return true;
            }
            return false;
        }

        private void RecordProgressForEstimation()
        {
            var now = DateTime.Now.Ticks;
            _reportedProgresses.Add(Tuple.Create(now, Progress));
            while ((now - _reportedProgresses.First().Item1) > 10 * 1000 * 8000)
                _reportedProgresses.RemoveAt(0);

            var elapsedMs = _reportedProgresses.Last().Item1 - _reportedProgresses.First().Item1;
            if (elapsedMs == 0)
                Speed = 0;
            else
                Speed = (_reportedProgresses.Last().Item2 - _reportedProgresses.First().Item2) * 10 * 1000 * 1000 / elapsedMs;
        }

        public async Task MoveUnnecessaryFiles(IIndexedZiPatchIndexInstaller installer, string gamePath, HashSet<string> targetRelativePaths)
        {
            this.MovedFileToDir = Path.Combine(gamePath, REPAIR_RECYCLER_DIRECTORY, DateTime.Now.ToString("yyyyMMdd_HHmmss"));

            var rootPathInfo = new DirectoryInfo(gamePath);
            gamePath = rootPathInfo.FullName;

            Queue<DirectoryInfo> directoriesToVisit = new();
            HashSet<DirectoryInfo> directoriesVisited = new();
            directoriesToVisit.Enqueue(rootPathInfo);
            directoriesVisited.Add(rootPathInfo);

            while (directoriesToVisit.Any())
            {
                var dir = directoriesToVisit.Dequeue();

                // For directories, ignore if final path does not belong in the root path.
                if (!dir.FullName.ToLowerInvariant().Replace('\\', '/').StartsWith(gamePath.ToLowerInvariant().Replace('\\', '/')))
                    continue;

                var relativeDirPath = dir == rootPathInfo ? "" : dir.FullName.Substring(gamePath.Length + 1).Replace('\\', '/');
                if (GameIgnoreUnnecessaryFilePatterns.Any(x => x.IsMatch(relativeDirPath)))
                    continue;

                if (!dir.EnumerateFileSystemInfos().Any())
                {
                    await installer.RemoveDirectory(dir.FullName);
                    await installer.CreateDirectory(Path.Combine(this.MovedFileToDir, relativeDirPath));
                    continue;
                }

                foreach (var subdir in dir.EnumerateDirectories())
                {
                    if (directoriesVisited.Contains(subdir))
                        continue;

                    directoriesVisited.Add(subdir);
                    directoriesToVisit.Enqueue(subdir);
                }

                foreach (var file in dir.EnumerateFiles())
                {
                    if (!file.FullName.ToLowerInvariant().Replace('\\', '/').StartsWith(gamePath.ToLowerInvariant().Replace('\\', '/')))
                        continue;

                    var relativePath = file.FullName.Substring(gamePath.Length + 1).Replace('\\', '/');
                    if (targetRelativePaths.Any(x => x.Replace('\\', '/').ToLowerInvariant() == relativePath.ToLowerInvariant()))
                        continue;

                    if (GameIgnoreUnnecessaryFilePatterns.Any(x => x.IsMatch(relativePath)))
                        continue;

                    await installer.MoveFile(file.FullName, Path.Combine(this.MovedFileToDir, relativePath));
                    MovedFiles.Add(relativePath);
                }
            }
        }

        private async Task RunVerifier()
        {
            State = VerifyState.NotStarted;
            LastException = null;
            IIndexedZiPatchIndexInstaller indexedZiPatchIndexInstaller = null;
            try
            {
                var assemblyLocation = AppContext.BaseDirectory;
                if (_external)
                    indexedZiPatchIndexInstaller = new IndexedZiPatchIndexRemoteInstaller(Path.Combine(assemblyLocation!, "XIVLauncher.PatchInstaller.exe"),
                        AdminAccessRequired(_settings.GamePath.FullName));
                else
                    indexedZiPatchIndexInstaller = new IndexedZiPatchIndexLocalInstaller();

                await indexedZiPatchIndexInstaller.SetWorkerProcessPriority(ProcessPriorityClass.Idle).ConfigureAwait(false);

                while (!_cancellationTokenSource.IsCancellationRequested && State != VerifyState.Done)
                {
                    switch (State)
                    {

                        case VerifyState.NotStarted:
                            State = VerifyState.DownloadMeta;
                            break;

                        case VerifyState.DownloadMeta:
                            await this.GetPatchMeta().ConfigureAwait(false);
                            State = VerifyState.VerifyAndRepair;
                            break;

                        case VerifyState.VerifyAndRepair:
                            Debug.Assert(_repoMetaPaths.Count != 0);

                            const int MAX_CONCURRENT_CONNECTIONS_FOR_PATCH_SET = 8;
                            const int REATTEMPT_COUNT = 5;

                            CurrentFile = null;
                            TaskIndex = 0;
                            PatchSetIndex = 0;
                            PatchSetCount = _repoMetaPaths.Count;
                            Progress = Total = 0;

                            HashSet<string> targetRelativePaths = new();

                            var bootPath = Path.Combine(_settings.GamePath.FullName, "boot");
                            var gamePath = Path.Combine(_settings.GamePath.FullName, "game");

                            foreach (var metaPath in _repoMetaPaths)
                            {
                                var patchIndex = new IndexedZiPatchIndex(new BinaryReader(new DeflateStream(new FileStream(metaPath.Value, FileMode.Open, FileAccess.Read), CompressionMode.Decompress)));
                                var adjustedGamePath = patchIndex.ExpacVersion == IndexedZiPatchIndex.EXPAC_VERSION_BOOT ? bootPath : gamePath;

                                foreach (var target in patchIndex.Targets)
                                    targetRelativePaths.Add(target.RelativePath);

                                void UpdateVerifyProgress(int targetIndex, long progress, long max)
                                {
                                    CurrentFile = patchIndex[Math.Min(targetIndex, patchIndex.Length - 1)].RelativePath;
                                    TaskIndex = targetIndex;
                                    Progress = Math.Min(progress, max);
                                    Total = max;
                                    RecordProgressForEstimation();
                                }

                                void UpdateInstallProgress(int sourceIndex, long progress, long max, IndexedZiPatchInstaller.InstallTaskState state)
                                {
                                    CurrentFile = patchIndex.Sources[Math.Min(sourceIndex, patchIndex.Sources.Count - 1)];
                                    TaskIndex = sourceIndex;
                                    Progress = Math.Min(progress, max);
                                    Total = max;
                                    CurrentMetaInstallState = state;
                                    RecordProgressForEstimation();
                                }

                                try
                                {
                                    indexedZiPatchIndexInstaller.OnVerifyProgress += UpdateVerifyProgress;
                                    indexedZiPatchIndexInstaller.OnInstallProgress += UpdateInstallProgress;
                                    await indexedZiPatchIndexInstaller.ConstructFromPatchFile(patchIndex, ProgressUpdateInterval).ConfigureAwait(false);

                                    var fileBroken = new bool[patchIndex.Length].ToList();
                                    var repaired = false;
                                    for (var attemptIndex = 0; attemptIndex < REATTEMPT_COUNT; attemptIndex++)
                                    {
                                        CurrentMetaInstallState = IndexedZiPatchInstaller.InstallTaskState.NotStarted;

                                        TaskCount = patchIndex.Length;
                                        Progress = Total = TaskIndex = 0;
                                        _reportedProgresses.Clear();

                                        await indexedZiPatchIndexInstaller.SetTargetStreamsFromPathReadOnly(adjustedGamePath).ConfigureAwait(false);
                                        // TODO: check one at a time if random access is slow?
                                        await indexedZiPatchIndexInstaller.VerifyFiles(attemptIndex > 0, Environment.ProcessorCount, _cancellationTokenSource.Token).ConfigureAwait(false);

                                        var missingPartIndicesPerTargetFile = await indexedZiPatchIndexInstaller.GetMissingPartIndicesPerTargetFile().ConfigureAwait(false);
                                        if ((repaired = missingPartIndicesPerTargetFile.All(x => !x.Any())))
                                            break;
                                        else if (attemptIndex == 1)
                                            Log.Warning("One or more of local copies of patch files seem to be corrupt, if any. Ignoring local patch files for further attempts.");

                                        for (var i = 0; i < missingPartIndicesPerTargetFile.Count; i++)
                                            if (missingPartIndicesPerTargetFile[i].Any())
                                                fileBroken[i] = true;

                                        TaskCount = patchIndex.Sources.Count;
                                        Progress = Total = TaskIndex = 0;
                                        _reportedProgresses.Clear();
                                        var missing = await indexedZiPatchIndexInstaller.GetMissingPartIndicesPerPatch().ConfigureAwait(false);

                                        await indexedZiPatchIndexInstaller.SetTargetStreamsFromPathReadWriteForMissingFiles(adjustedGamePath).ConfigureAwait(false);
                                        var prefix = patchIndex.ExpacVersion == IndexedZiPatchIndex.EXPAC_VERSION_BOOT ? "boot:" : $"ex{patchIndex.ExpacVersion}:";
                                        for (var i = 0; i < patchIndex.Sources.Count; i++)
                                        {
                                            var patchSourceKey = prefix + patchIndex.Sources[i];

                                            if (!missing[i].Any())
                                                continue;
                                            else
                                                Log.Information("Looking for patch file {0} (key: \"{1}\")", patchIndex.Sources[i], patchSourceKey);

                                            if (!_patchSources.TryGetValue(patchSourceKey, out var source))
                                                throw new InvalidOperationException($"Key \"{patchSourceKey}\" not found in _patchSources");

                                            // We might be trying again because local copy of the patch file might be corrupt, so refer to the local copy only for the first attempt.
                                            if (attemptIndex == 0 && source.FileInfo.Exists)
                                                await indexedZiPatchIndexInstaller.QueueInstall(i, source.FileInfo, MAX_CONCURRENT_CONNECTIONS_FOR_PATCH_SET).ConfigureAwait(false);
                                            else
                                                await indexedZiPatchIndexInstaller.QueueInstall(i, source.Uri, null, MAX_CONCURRENT_CONNECTIONS_FOR_PATCH_SET).ConfigureAwait(false);
                                        }

                                        CurrentMetaInstallState = IndexedZiPatchInstaller.InstallTaskState.Connecting;
                                        try
                                        {
                                            await indexedZiPatchIndexInstaller.Install(MAX_CONCURRENT_CONNECTIONS_FOR_PATCH_SET, _cancellationTokenSource.Token).ConfigureAwait(false);
                                        }
                                        catch (Exception e)
                                        {
                                            Log.Error(e, "IndexedZiPatchIndexInstaller.Install");
                                            if (attemptIndex == REATTEMPT_COUNT - 1)
                                                throw;
                                        }
                                    }

                                    if (!repaired)
                                        throw new IOException($"Failed to repair after {REATTEMPT_COUNT} attempts");

                                    await indexedZiPatchIndexInstaller.WriteVersionFiles(adjustedGamePath).ConfigureAwait(false);

                                    NumBrokenFiles += fileBroken.Count(x => x);
                                    PatchSetIndex++;
                                }
                                finally
                                {
                                    indexedZiPatchIndexInstaller.OnVerifyProgress -= UpdateVerifyProgress;
                                    indexedZiPatchIndexInstaller.OnInstallProgress -= UpdateInstallProgress;
                                }
                            }

                            await MoveUnnecessaryFiles(indexedZiPatchIndexInstaller, gamePath, targetRelativePaths);

                            State = VerifyState.Done;
                            break;

                        case VerifyState.Done:
                            break;

                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }
            }
            catch (Exception ex)
            {
                if (ex is OperationCanceledException)
                    State = VerifyState.Cancelled;
                else if (_cancellationTokenSource.IsCancellationRequested)
                    State = VerifyState.Cancelled;
                else if (ex is Win32Exception winex && (uint)winex.HResult == 0x80004005u)  // The operation was canceled by the user (UAC dialog cancellation)
                    State = VerifyState.Cancelled;
                else
                {
                    Log.Error(ex, "Unexpected error occurred in RunVerifier");
                    Log.Information("_patchSources had following:");
                    foreach (var kvp in _patchSources)
                    {
                        Log.Information("* \"{0}\" = {1} / {2}({3})", kvp.Key, kvp.Value.Uri.ToString(), kvp.Value.FileInfo.FullName, kvp.Value.FileInfo.Exists ? "Exists" : "Nonexistent");
                    }

                    LastException = ex;
                    State = VerifyState.Error;
                }
            }
            finally
            {
                indexedZiPatchIndexInstaller?.Dispose();
            }
        }

        private async Task GetPatchMeta()
        {
            PatchSetCount = 6;
            PatchSetIndex = 0;

            _repoMetaPaths.Clear();

            var metaFolder = Path.Combine(Paths.RoamingPath, "patchMeta");
            Directory.CreateDirectory(metaFolder);

            CurrentFile = "latest.json";
            Total = Progress = 0;

            var latestVersionJson = await _client.GetStringAsync(BASE_URL + "latest.json").ConfigureAwait(false);
            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

            var latestVersion = JsonConvert.DeserializeObject<VerifyVersions>(latestVersionJson);

            PatchSetIndex++;
            await this.GetRepoMeta(Repository.Ffxiv, latestVersion.Game, metaFolder, latestVersion.GameRevision).ConfigureAwait(false);
            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

            PatchSetIndex++;
            if (_maxExpansionToCheck >= 1)
                await this.GetRepoMeta(Repository.Ex1, latestVersion.Ex1, metaFolder, latestVersion.Ex1Revision).ConfigureAwait(false);
            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

            PatchSetIndex++;
            if (_maxExpansionToCheck >= 2)
                await this.GetRepoMeta(Repository.Ex2, latestVersion.Ex2, metaFolder, latestVersion.Ex2Revision).ConfigureAwait(false);
            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

            PatchSetIndex++;
            if (_maxExpansionToCheck >= 3)
                await this.GetRepoMeta(Repository.Ex3, latestVersion.Ex3, metaFolder, latestVersion.Ex3Revision).ConfigureAwait(false);
            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

            PatchSetIndex++;
            if (_maxExpansionToCheck >= 4)
                await this.GetRepoMeta(Repository.Ex4, latestVersion.Ex4, metaFolder, latestVersion.Ex4Revision).ConfigureAwait(false);
            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

            PatchSetIndex++;
        }

        private async Task GetRepoMeta(Repository repo, string latestVersion, string baseDir, int patchIndexFileRevision)
        {
            _reportedProgresses.Clear();
            CurrentFile = latestVersion;
            Total = 32 * 1048576;
            Progress = 0;

            var version = repo.GetVer(_settings.GamePath);

            // TODO: We should not assume that this always has a "D". We should just store them by the patchlist VersionId instead.
            var repoShorthand = repo == Repository.Ffxiv ? "game" : repo.ToString().ToLower();
            var fileName = $"{latestVersion}.patch.index";

            var metaPath = Path.Combine(baseDir, repoShorthand);
            var filePath = Path.Combine(metaPath, fileName) + (patchIndexFileRevision > 0 ? $".v{patchIndexFileRevision}" : "");
            Directory.CreateDirectory(metaPath);

            if (!File.Exists(filePath))
            {
                var request = await _client.GetAsync($"{BASE_URL}{repoShorthand}/{fileName}", HttpCompletionOption.ResponseHeadersRead, _cancellationTokenSource.Token).ConfigureAwait(false);
                if (request.StatusCode == HttpStatusCode.NotFound)
                    throw new NoVersionReferenceException(repo, latestVersion);

                request.EnsureSuccessStatusCode();

                Total = request.Content.Headers.ContentLength.GetValueOrDefault(Total);

                var tempFile = new FileInfo(filePath + ".tmp");
                var complete = false;

                try
                {
                    using var sourceStream = await request.Content.ReadAsStreamAsync().ConfigureAwait(false);
                    using var buffer = ReusableByteBufferManager.GetBuffer();

                    using (var targetStream = tempFile.OpenWrite())
                    {
                        while (true)
                        {
                            _cancellationTokenSource.Token.ThrowIfCancellationRequested();

                            int read = await sourceStream.ReadAsync(buffer.Buffer, 0, buffer.Buffer.Length, _cancellationTokenSource.Token).ConfigureAwait(false);
                            if (read == 0)
                                break;

                            Total = Math.Max(Total, Progress + read);
                            Progress += read;
                            RecordProgressForEstimation();
                            await targetStream.WriteAsync(buffer.Buffer, 0, read, _cancellationTokenSource.Token).ConfigureAwait(false);
                        }
                    }
                    complete = true;
                }
                finally
                {
                    if (complete)
                        tempFile.MoveTo(filePath);
                    else
                    {
                        try
                        {
                            if (tempFile.Exists)
                                tempFile.Delete();
                        }
                        catch (Exception ex)
                        {
                            Log.Warning(ex, "Failed to delete temp file at {0}", tempFile.FullName);
                        }
                    }
                }
            }

            _repoMetaPaths.Add(repo, filePath);
            Log.Verbose("Downloaded patch index for {Repo}({Version})", repo, latestVersion);
        }

        public static List<FileInfo> GetRelevantFiles(string gamePath)
        {
            var rootPathInfo = new DirectoryInfo(gamePath);
            gamePath = rootPathInfo.FullName;

            Queue<DirectoryInfo> directoriesToVisit = new();
            HashSet<DirectoryInfo> directoriesVisited = new();
            directoriesToVisit.Enqueue(rootPathInfo);
            directoriesVisited.Add(rootPathInfo);

            List<FileInfo> files = new();

            while (directoriesToVisit.Any())
            {
                var dir = directoriesToVisit.Dequeue();

                // For directories, ignore if final path does not belong in the root path.
                if (!dir.FullName.ToLowerInvariant().Replace('\\', '/').StartsWith(gamePath.ToLowerInvariant().Replace('\\', '/'), StringComparison.Ordinal))
                    continue;

                var relativeDirPath = dir == rootPathInfo ? "" : dir.FullName.Substring(gamePath.Length + 1).Replace('\\', '/');
                if (GameIgnoreUnnecessaryFilePatterns.Any(x => x.IsMatch(relativeDirPath)))
                    continue;

                foreach (var subdir in dir.EnumerateDirectories())
                {
                    if (directoriesVisited.Contains(subdir))
                        continue;

                    directoriesVisited.Add(subdir);
                    directoriesToVisit.Enqueue(subdir);
                }

                foreach (var file in dir.EnumerateFiles())
                {
                    if (!file.FullName.ToLowerInvariant().Replace('\\', '/').StartsWith(gamePath.ToLowerInvariant().Replace('\\', '/'), StringComparison.Ordinal))
                        continue;

                    var relativePath = file.FullName.Substring(gamePath.Length + 1).Replace('\\', '/');

                    if (GameIgnoreUnnecessaryFilePatterns.Any(x => x.IsMatch(relativePath)))
                        continue;

                    files.Add(file);
                }
            }

            return files;
        }

        public void Dispose()
        {
            if (_verificationTask != null && !_verificationTask.IsCompleted)
            {
                _cancellationTokenSource.Cancel();
                _verificationTask.Wait();
            }
        }
    }
}﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using LibDalamud;
using LibDalamud.Common.Util;
using Serilog;
using XIVLauncher.Common.Game.Patch.Acquisition;
using XIVLauncher.Common.Game.Patch.Acquisition.Aria;
using XIVLauncher.Common.Game.Patch.PatchList;
using XIVLauncher.Common.Util;
using static XIVLauncher.Common.Game.Patch.PatchInstaller;

namespace XIVLauncher.Common.Game.Patch
{
    public enum PatchState
    {
        Nothing,
        IsDownloading,
        Downloaded,
        IsInstalling,
        Finished
    }

    public class PatchDownload
    {
        public PatchListEntry Patch { get; set; }
        public PatchState State { get; set; }
    }

    public class PatchManager
    {
        public const int MAX_DOWNLOADS_AT_ONCE = 4;

        private readonly CancellationTokenSource _cancelTokenSource = new();

        private readonly AcquisitionMethod acquisitionMethod;
        private readonly long speedLimitBytes;
        private readonly Repository repo;
        private readonly DirectoryInfo gamePath;
        private readonly DirectoryInfo patchStore;
        private readonly PatchInstaller installer;
        private readonly Launcher launcher;
        private readonly string sid;

        public readonly IReadOnlyList<PatchDownload> Downloads;

        public int CurrentInstallIndex { get; private set; }

        public enum SlotState
        {
            InProgress,
            Checking,
            Done,
        }

        public readonly long[] Progresses = new long[MAX_DOWNLOADS_AT_ONCE];
        public readonly double[] Speeds = new double[MAX_DOWNLOADS_AT_ONCE];
        public readonly PatchDownload[] Actives = new PatchDownload[MAX_DOWNLOADS_AT_ONCE];
        public readonly SlotState[] Slots = new SlotState[MAX_DOWNLOADS_AT_ONCE];
        public readonly PatchAcquisition[] DownloadServices = new PatchAcquisition[MAX_DOWNLOADS_AT_ONCE];

        public bool IsInstallerBusy { get; private set; }

        public bool DownloadsDone { get; private set; }

        public long AllDownloadsLength => GetDownloadLength();

        private bool hasError = false;

        public event Action<FailReason, string> OnFail;

        public enum FailReason
        {
            DownloadProblem,
            HashCheck,
        }

        public PatchManager(AcquisitionMethod acquisitionMethod, long speedLimitBytes, Repository repo, IEnumerable<PatchListEntry> patches, DirectoryInfo gamePath, DirectoryInfo patchStore, PatchInstaller installer, Launcher launcher, string sid)
        {
            Debug.Assert(patches != null, "patches != null ASSERTION FAILED");

            this.acquisitionMethod = acquisitionMethod;
            this.speedLimitBytes = speedLimitBytes;
            this.repo = repo;
            this.gamePath = gamePath;
            this.patchStore = patchStore;
            this.installer = installer;
            this.launcher = launcher;
            this.sid = sid;

            if (!this.patchStore.Exists)
                this.patchStore.Create();

            Downloads = patches.Select(patchListEntry => new PatchDownload {Patch = patchListEntry, State = PatchState.Nothing}).ToList().AsReadOnly();

            // All dl slots are available at the start
            for (var i = 0; i < MAX_DOWNLOADS_AT_ONCE; i++)
            {
                Slots[i] = SlotState.Done;
            }
        }

        public async Task PatchAsync(FileInfo aria2LogFile, bool external = true)
        {
            if (!EnvironmentSettings.IsIgnoreSpaceRequirements)
            {
                var freeSpaceDownload = PlatformHelpers.GetDiskFreeSpace(this.patchStore);

                if (Downloads.Any(x => x.Patch.Length > freeSpaceDownload))
                {
                    throw new NotEnoughSpaceException(NotEnoughSpaceException.SpaceKind.Patches,
                        Downloads.OrderByDescending(x => x.Patch.Length).First().Patch.Length, freeSpaceDownload);
                }

                // If the first 6 patches altogether are bigger than the patch drive, we might run out of space
                if (freeSpaceDownload < GetDownloadLength(6))
                {
                    throw new NotEnoughSpaceException(NotEnoughSpaceException.SpaceKind.AllPatches, AllDownloadsLength,
                        freeSpaceDownload);
                }

                var freeSpaceGame = PlatformHelpers.GetDiskFreeSpace(this.gamePath);

                if (freeSpaceGame < AllDownloadsLength)
                {
                    throw new NotEnoughSpaceException(NotEnoughSpaceException.SpaceKind.Game, AllDownloadsLength,
                        freeSpaceGame);
                }
            }

            this.installer.StartIfNeeded(external);
            this.installer.WaitOnHello();

            await InitializeAcquisition(aria2LogFile).ConfigureAwait(false);

            try
            {
                await Task.WhenAll(new Task[] {
                    Task.Run(RunDownloadQueue, _cancelTokenSource.Token),
                    Task.Run(RunApplyQueue, _cancelTokenSource.Token),
                }).ConfigureAwait(false);
            }
            finally
            {
                // Only PatchManager uses Aria (or Torrent), so it's safe to shut it down here.
                await UnInitializeAcquisition().ConfigureAwait(false);
            }
        }

        public async Task InitializeAcquisition(FileInfo aria2LogFile)
        {
            // TODO: Come up with a better pattern for initialization. This sucks.
            switch (this.acquisitionMethod)
            {
                case AcquisitionMethod.NetDownloader:
                    // ignored
                    break;

                case AcquisitionMethod.MonoTorrentNetFallback:
                    await TorrentPatchAcquisition.InitializeAsync(this.speedLimitBytes / MAX_DOWNLOADS_AT_ONCE);
                    break;

                case AcquisitionMethod.MonoTorrentAriaFallback:
                    await AriaHttpPatchAcquisition.InitializeAsync(this.speedLimitBytes / MAX_DOWNLOADS_AT_ONCE, aria2LogFile);
                    await TorrentPatchAcquisition.InitializeAsync(this.speedLimitBytes / MAX_DOWNLOADS_AT_ONCE);
                    break;

                case AcquisitionMethod.Aria:
                    await AriaHttpPatchAcquisition.InitializeAsync(this.speedLimitBytes / MAX_DOWNLOADS_AT_ONCE, aria2LogFile);
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        public static async Task UnInitializeAcquisition()
        {
            try
            {
                await AriaHttpPatchAcquisition.UnInitializeAsync();
                await TorrentPatchAcquisition.UnInitializeAsync();
            }
            catch (Exception ex)
            {
                Log.Error(ex, "Could not uninitialize patch acquisition.");
            }
        }

        private async Task DownloadPatchAsync(PatchDownload download, int index)
        {
            var outFile = GetPatchFile(download.Patch);

            var realUrl = download.Patch.Url;
            if (this.repo != Repository.Boot && false) // Disabled for now, waiting on SE to patch this
            {
                realUrl = await this.launcher.GenPatchToken(download.Patch.Url, this.sid);
            }

            Log.Information("Downloading patch {0} at {1} to {2}", download.Patch.VersionId, realUrl, outFile.FullName);

            Actives[index] = download;

            if (outFile.Exists && CheckPatchValidity(download.Patch, outFile) == HashCheckResult.Pass)
            {
                download.State = PatchState.Downloaded;
                Slots[index] = SlotState.Done;
                Progresses[index] = download.Patch.Length;
                return;
            }

            PatchAcquisition acquisition;

            switch (this.acquisitionMethod)
            {
                case AcquisitionMethod.NetDownloader:
                    acquisition = new NetDownloaderPatchAcquisition(this.patchStore, this.speedLimitBytes / MAX_DOWNLOADS_AT_ONCE);
                    break;

                case AcquisitionMethod.MonoTorrentNetFallback:
                    acquisition = new TorrentPatchAcquisition();

                    var torrentAcquisition = acquisition as TorrentPatchAcquisition;
                    if (!torrentAcquisition.IsApplicable(download.Patch))
                        acquisition = new NetDownloaderPatchAcquisition(this.patchStore, this.speedLimitBytes / MAX_DOWNLOADS_AT_ONCE);
                    break;

                case AcquisitionMethod.MonoTorrentAriaFallback:
                    acquisition = new TorrentPatchAcquisition();

                    torrentAcquisition = acquisition as TorrentPatchAcquisition;
                    if (!torrentAcquisition.IsApplicable(download.Patch))
                        acquisition = new AriaHttpPatchAcquisition();
                    break;
                case AcquisitionMethod.Aria:
                    acquisition = new AriaHttpPatchAcquisition();
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

            acquisition.ProgressChanged += (sender, args) =>
            {
                Progresses[index] = args.Progress;
                Speeds[index] = args.BytesPerSecondSpeed;
            };

            acquisition.Complete += (sender, args) =>
            {
                if (args == AcquisitionResult.Error)
                {
                    if (this.hasError)
                        return;

                    Log.Error("Download failed for {0}", download.Patch.VersionId);

                    hasError = true;

                    OnFail?.Invoke(FailReason.DownloadProblem, download.Patch.VersionId);

                    CancelAllDownloads();

                    Environment.Exit(0);
                    return;
                }

                if (args == AcquisitionResult.Cancelled)
                {
                    // Cancellation should not produce an error message, since it is always triggered by another error or the user.
                    Log.Error("Download cancelled for {0}", download.Patch.VersionId);

                    return;
                }

                // Indicate "Checking..."
                Slots[index] = SlotState.Checking;

                var checkResult = CheckPatchValidity(download.Patch, outFile);

                // Let's just bail for now, need better handling of this later
                if (checkResult != HashCheckResult.Pass)
                {
                    if (this.hasError)
                        return;

                    Log.Error("IsHashCheckPass failed with {Result} for {VersionId} after DL", checkResult, download.Patch.VersionId);

                    hasError = true;

                    OnFail?.Invoke(FailReason.HashCheck, download.Patch.VersionId);

                    CancelAllDownloads();

                    outFile.Delete();
                    Environment.Exit(0);
                    return;
                }

                download.State = PatchState.Downloaded;
                Slots[index] = SlotState.Done;
                Progresses[index] = 0;
                Speeds[index] = 0;

                Log.Information("Patch at {0} downloaded completely", download.Patch.Url);

                this.CheckIsDone();
            };

            DownloadServices[index] = acquisition;

            await acquisition.StartDownloadAsync(realUrl, outFile);
        }

        public void CancelAllDownloads()
        {
            #if !DEBUG
            return;
            #endif

            foreach (var downloadService in DownloadServices)
            {
                try
                {
                    downloadService?.CancelAsync().GetAwaiter().GetResult();
                    Thread.Sleep(200);
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "Could not cancel download.");
                }
            }
        }

        private void RunDownloadQueue()
        {
            while (Downloads.Any(x => x.State == PatchState.Nothing))
            {
                Thread.Sleep(500);
                for (var i = 0; i < MAX_DOWNLOADS_AT_ONCE; i++)
                {
                    if (Slots[i] != SlotState.Done)
                        continue;

                    Slots[i] = SlotState.InProgress;

                    var toDl = Downloads.FirstOrDefault(x => x.State == PatchState.Nothing);

                    if (toDl == null)
                        return;

                    toDl.State = PatchState.IsDownloading;
                    var curIndex = i;
                    Task.Run(async () =>
                    {
                        try
                        {
                            await DownloadPatchAsync(toDl, curIndex);
                        }
                        catch (Exception ex)
                        {
                            Log.Error(ex, "Exception in DownloadPatchAsync");
                            throw;
                        }
                    });
                }
            }
        }

        private void CheckIsDone()
        {
            Log.Information("CheckIsDone!!");

            if (!Downloads.Any(x => x.State is PatchState.Nothing or PatchState.IsDownloading))
            {
                Log.Information("All patches downloaded.");

                DownloadsDone = true;

                for (var j = 0; j < Progresses.Length; j++)
                {
                    Progresses[j] = 0;
                }

                for (var j = 0; j < Speeds.Length; j++)
                {
                    Speeds[j] = 0;
                }

                return;
            }
        }

        private void RunApplyQueue()
        {
            while (CurrentInstallIndex < Downloads.Count)
            {
                Thread.Sleep(500);

                var toInstall = Downloads[CurrentInstallIndex];

                if (toInstall.State != PatchState.Downloaded)
                    continue;

                toInstall.State = PatchState.IsInstalling;

                Log.Information("Starting patch install for {0} at {1}({2})", toInstall.Patch.VersionId, toInstall.Patch.Url, CurrentInstallIndex);

                IsInstallerBusy = true;

                this.installer.StartInstall(this.gamePath, GetPatchFile(toInstall.Patch), toInstall.Patch, GetRepoForPatch(toInstall.Patch));

                while (this.installer.State != PatchInstaller.InstallerState.Ready)
                {
                    Thread.Yield();
                }

                // TODO need to handle this better
                if (this.installer.State == PatchInstaller.InstallerState.Failed)
                    return;

                Log.Information($"Patch at {CurrentInstallIndex} installed");

                IsInstallerBusy = false;

                toInstall.State = PatchState.Finished;
                CurrentInstallIndex++;
            }

            Log.Information("PATCHING finish");
            this.installer.FinishInstall(this.gamePath);
        }

        private enum HashCheckResult
        {
            Pass,
            BadHash,
            BadLength,
        }

        private static HashCheckResult CheckPatchValidity(PatchListEntry patchListEntry, FileInfo path)
        {
            if (patchListEntry.HashType != "sha1")
            {
                Log.Error("??? Unknown HashType: {0} for {1}", patchListEntry.HashType, patchListEntry.Url);
                return HashCheckResult.Pass;
            }

            var stream = path.OpenRead();

            if (stream.Length != patchListEntry.Length)
            {
                return HashCheckResult.BadLength;
            }

            var parts = (int) Math.Ceiling((double) patchListEntry.Length / patchListEntry.HashBlockSize);
            var block = new byte[patchListEntry.HashBlockSize];

            for (var i = 0; i < parts; i++)
            {
                var read = stream.Read(block, 0, (int) patchListEntry.HashBlockSize);

                if (read < patchListEntry.HashBlockSize)
                {
                    var trimmedBlock = new byte[read];
                    Array.Copy(block, 0, trimmedBlock, 0, read);
                    block = trimmedBlock;
                }

                using var sha1 = new SHA1Managed();

                var hash = sha1.ComputeHash(block);
                var sb = new StringBuilder(hash.Length * 2);

                foreach (var b in hash)
                {
                    sb.Append(b.ToString("x2"));
                }

                if (sb.ToString() == patchListEntry.Hashes[i])
                    continue;

                stream.Close();
                return HashCheckResult.BadHash;
            }

            stream.Close();
            return HashCheckResult.Pass;
        }

        private FileInfo GetPatchFile(PatchListEntry patch)
        {
            var file = new FileInfo(Path.Combine(this.patchStore.FullName, patch.GetFilePath()));
            file.Directory.Create();

            return file;
        }

        private Repository GetRepoForPatch(PatchListEntry patch)
        {
            if (patch.Url.Contains("boot"))
                return Repository.Boot;

            if (patch.Url.Contains("ex1"))
                return Repository.Ex1;

            if (patch.Url.Contains("ex2"))
                return Repository.Ex2;

            if (patch.Url.Contains("ex3"))
                return Repository.Ex3;

            if (patch.Url.Contains("ex4"))
                return Repository.Ex4;

            return Repository.Ffxiv;
        }

        private long GetDownloadLength() => GetDownloadLength(Downloads.Count);

        private long GetDownloadLength(int takeAmount) => Downloads.Take(takeAmount).Where(x => x.State == PatchState.Nothing || x.State == PatchState.IsDownloading).Sum(x => x.Patch.Length) - Progresses.Sum();    }
}using System;

namespace XIVLauncher.Common.Game.Patch;

public class PatchInstallerException : Exception
{
    public PatchInstallerException(string message, Exception? inner = null) : base(message, inner)
    {
        // ignored
    }
}﻿using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using LibDalamud;
using Serilog;
using XIVLauncher.Common.Game.Patch.PatchList;
using XIVLauncher.Common.PatcherIpc;
using XIVLauncher.Common.Patching;
using XIVLauncher.Common.Patching.Rpc;
using XIVLauncher.Common.Patching.Rpc.Implementations;

namespace XIVLauncher.Common.Game.Patch
{
    public class PatchInstaller : IDisposable
    {
        private readonly bool keepPatches;
        private IRpc rpc;

        private RemotePatchInstaller? internalPatchInstaller;

        public enum InstallerState
        {
            NotStarted,
            NotReady,
            Ready,
            Busy,
            Failed
        }

        public InstallerState State { get; private set; } = InstallerState.NotStarted;

        public event Action OnFail;

        public PatchInstaller(bool keepPatches)
        {
            this.keepPatches = keepPatches;
        }
        
        public void StartIfNeeded(bool external = true)
        {
            var rpcName = "XLPatcher" + Guid.NewGuid().ToString();

            Log.Information("[PATCHERIPC] Starting patcher with '{0}'", rpcName);

            if (external)
            {
                this.rpc = new SharedMemoryRpc(rpcName);
                this.rpc.MessageReceived += RemoteCallHandler;

                var path = Path.Combine(AppContext.BaseDirectory,
                    "XIVLauncher.PatchInstaller.exe");

                var startInfo = new ProcessStartInfo(path);
                startInfo.UseShellExecute = true;

                //Start as admin if needed
                if (!EnvironmentSettings.IsNoRunas && Environment.OSVersion.Version.Major >= 6)
                    startInfo.Verb = "runas";

                startInfo.Arguments = $"rpc {rpcName}";

                State = InstallerState.NotReady;

                try
                {
                    Process.Start(startInfo);
                }
                catch (Exception ex)
                {
                    Log.Error(ex, "Could not launch Patch Installer");
                    throw new PatchInstallerException("Start failed.", ex);
                }
            }
            else
            {
                this.rpc = new InProcessRpc(rpcName);
                this.rpc.MessageReceived += RemoteCallHandler;

                this.internalPatchInstaller = new RemotePatchInstaller(new InProcessRpc(rpcName));
                this.internalPatchInstaller.Start();
            }
        }

        private void RemoteCallHandler(PatcherIpcEnvelope envelope)
        {
            switch (envelope.OpCode)
            {
                case PatcherIpcOpCode.Hello:
                    //_client.Initialize(_clientPort);
                    Log.Information("[PATCHERIPC] GOT HELLO");
                    State = InstallerState.Ready;
                    break;

                case PatcherIpcOpCode.InstallOk:
                    Log.Information("[PATCHERIPC] INSTALL OK");
                    State = InstallerState.Ready;
                    break;

                case PatcherIpcOpCode.InstallFailed:
                    State = InstallerState.Failed;
                    OnFail?.Invoke();

                    Stop();
                    Environment.Exit(0);
                    break;

                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        public void WaitOnHello()
        {
            for (var i = 0; i < 40; i++)
            {
                if (State == InstallerState.Ready)
                    return;

                Thread.Sleep(500);
            }

            throw new PatchInstallerException("Installer RPC timed out.");
        }

        public void Stop()
        {
            if (State == InstallerState.NotReady || State == InstallerState.NotStarted || State == InstallerState.Busy)
                return;

            this.rpc.SendMessage(new PatcherIpcEnvelope
            {
                OpCode = PatcherIpcOpCode.Bye
            });
        }

        public void StartInstall(DirectoryInfo gameDirectory, FileInfo file, PatchListEntry patch, Repository repo)
        {
            State = InstallerState.Busy;
            this.rpc.SendMessage(new PatcherIpcEnvelope
            {
                OpCode = PatcherIpcOpCode.StartInstall,
                Data = new PatcherIpcStartInstall
                {
                    GameDirectory = gameDirectory,
                    PatchFile = file,
                    Repo = repo,
                    VersionId = patch.VersionId,
                    KeepPatch = this.keepPatches,
                }
            });
        }

        public void FinishInstall(DirectoryInfo gameDirectory)
        {
            this.rpc.SendMessage(new PatcherIpcEnvelope
            {
                OpCode = PatcherIpcOpCode.Finish,
                Data = gameDirectory
            });
        }

        public void Dispose()
        {
            Stop();
        }
    }
}using System;

namespace XIVLauncher.Common.Game.Patch;

public class NotEnoughSpaceException : Exception
{
    public enum SpaceKind
    {
        Patches,
        AllPatches,
        Game,
    }

    public SpaceKind Kind { get; private set; }

    public long BytesRequired { get; set; }

    public long BytesFree { get; set; }

    public NotEnoughSpaceException(SpaceKind kind, long required, long free)
    {
        this.Kind = kind;
        this.BytesRequired = required;
        this.BytesFree = free;
    }
}﻿namespace XIVLauncher.Common.Game.Patch
{
    public enum GamePatchType
    {
        Boot,
        Game
    }
}﻿using System.IO;
using System.Text.RegularExpressions;

namespace XIVLauncher.Common.Game.Patch.PatchList
{
    public class PatchListEntry
    {
        private static Regex urlRegex = new Regex(".*/((game|boot)/([a-zA-Z0-9]+)/.*)", RegexOptions.Compiled | RegexOptions.CultureInvariant);

        public string VersionId { get; set; }
        public string HashType { get; set; }
        public string Url { get; set; }
        public long HashBlockSize { get; set; }
        public string[] Hashes { get; set; }
        public long Length { get; set; }

        public override string ToString() => $"{this.GetRepoName()}/{VersionId}";

        private Match Deconstruct() => urlRegex.Match(this.Url);

        public string GetRepoName()
        {
            var name = this.Deconstruct().Groups[3].Captures[0].Value;
            
            // The URL doesn't have the "ffxiv" part for ffxiv repo. Let's fake it for readability.
            return name == "4e9a232b" ? "ffxiv" : name;
        }

        public string GetUrlPath() => this.Deconstruct().Groups[1].Captures[0].Value;

        public string GetFilePath() => GetUrlPath().Replace('/', Path.DirectorySeparatorChar);
    }
}using System;

namespace XIVLauncher.Common.Game.Patch.PatchList;

public class PatchListParseException : Exception
{
    public string List { get; private set; }

    public PatchListParseException(string list, Exception innerException)
        : base("Failed to parse patch list", innerException)
    {
        List = list;
    }
}﻿using System;
using System.Collections.Generic;

namespace XIVLauncher.Common.Game.Patch.PatchList
{
    class PatchListParser
    {
        public static PatchListEntry[] Parse(string list)
        {
            try
            {
                var lines = list.Split(
                    new[] { "\r\n", "\r", "\n", Environment.NewLine },
                    StringSplitOptions.None
                );

                var output = new List<PatchListEntry>();

                for (var i = 5; i < lines.Length - 2; i++)
                {
                    var fields = lines[i].Split('\t');
                    output.Add(new PatchListEntry()
                    {
                        Length = long.Parse(fields[0]),
                        VersionId = fields[4],
                        HashType = fields[5],

                        HashBlockSize = fields.Length == 9 ? long.Parse(fields[6]) : 0,

                        // bootver patchlists don't have a hash field
                        Hashes = fields.Length == 9 ? (fields[7].Split(',')) : null,
                        Url = fields[fields.Length == 9 ? 8 : 5]
                    });
                }

                return output.ToArray();
            }
            catch (Exception ex)
            {
                throw new PatchListParseException(list, ex);
            }
        }
    }
}﻿using System;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using MonoTorrent.Client;
using Serilog;
using XIVLauncher.Common.Game.Patch.PatchList;

namespace XIVLauncher.Common.Game.Patch.Acquisition
{
    public class TorrentPatchAcquisition : PatchAcquisition
    {
        private static ClientEngine torrentEngine;

        private TorrentManager _torrentManager;
        private byte[] _torrentBytes;

        public static async Task InitializeAsync(long maxDownloadSpeed)
        {
            if (torrentEngine == null)
            {
                torrentEngine = new ClientEngine();

                var builder = new EngineSettingsBuilder(torrentEngine.Settings) {MaximumDownloadSpeed = (int)maxDownloadSpeed};

                await torrentEngine.UpdateSettingsAsync(builder.ToSettings());
            }
        }

        public static async Task UnInitializeAsync()
        {
            if (torrentEngine != null)
            {
                await torrentEngine.StopAllAsync();
                torrentEngine = null;
            }
        }

        public bool IsApplicable(PatchListEntry patch)
        {
            try
            {
                using var client = new WebClient();

                _torrentBytes = client.DownloadData("http://goaaats.github.io/patchtorrent/" + patch.GetUrlPath() + ".torrent");
            }
            catch (Exception ex)
            {
                Log.Error(ex, $"[TORRENT] Could not get torrent for patch: {patch.GetUrlPath()}");
                return false;
            }

            return true;
        }

        public override async Task StartDownloadAsync(string url, FileInfo outFile)
        {
            throw new NotImplementedException("WIP");

            /*
            if (_torrentBytes == null)
            {
                if (!IsApplicable(patch))
                    throw new Exception("This patch is not applicable to be downloaded with this acquisition method.");
            }

            var torrent = await Torrent.LoadAsync(_torrentBytes);
            var hasSignaledComplete = false;

            _torrentManager = await torrentEngine.AddAsync(torrent, outFile.Directory.FullName);
            _torrentManager.TorrentStateChanged += async (sender, args) =>
            {
                if ((int) _torrentManager.Progress == 100 && !hasSignaledComplete && args.NewState == TorrentState.Seeding)
                {
                    OnComplete(AcquisitionResult.Success);
                    hasSignaledComplete = true;
                    await _torrentManager.StopAsync();
                }
            };

            _torrentManager.PieceHashed += (sender, args) =>
            {
                OnProgressChanged(new AcquisitionProgress
                {
                    Progress = _torrentManager.Monitor.DataBytesDownloaded,
                    BytesPerSecondSpeed = _torrentManager.Monitor.DownloadSpeed
                });
            };

            await _torrentManager.StartAsync();
            await _torrentManager.DhtAnnounceAsync();
            */
        }

        public override async Task CancelAsync()
        {
            if (_torrentManager == null)
                return;

            await _torrentManager.StopAsync();
            await torrentEngine.RemoveAsync(_torrentManager);
        }
    }
}﻿using System;
using System.IO;
using System.Threading.Tasks;

namespace XIVLauncher.Common.Game.Patch.Acquisition
{
    public abstract class PatchAcquisition
    {
        public abstract Task StartDownloadAsync(string url, FileInfo outFile);
        public abstract Task CancelAsync();

        public event EventHandler<AcquisitionProgress> ProgressChanged;

        protected void OnProgressChanged(AcquisitionProgress progress)
        {
            this.ProgressChanged?.Invoke(this, progress);
        }

        public event EventHandler<AcquisitionResult> Complete;

        protected void OnComplete(AcquisitionResult result)
        {
            this.Complete?.Invoke(this, result);
        }
    }
}﻿using System;
using System.IO;
using System.Threading.Tasks;
using Downloader;
using LibDalamud;
using Serilog;

namespace XIVLauncher.Common.Game.Patch.Acquisition
{
    internal class NetDownloaderPatchAcquisition : PatchAcquisition
    {
        private readonly DirectoryInfo _patchStore;
        private DownloadService _dlService;

        private string DownloadTempPath => Path.Combine(_patchStore.FullName, "temp");

        private DownloadConfiguration _downloadOpt = new DownloadConfiguration
        {
            ParallelDownload = true, // download parts of file as parallel or not
            BufferBlockSize = 8000, // usually, hosts support max to 8000 bytes
            ChunkCount = 8, // file parts to download
            MaxTryAgainOnFailover = int.MaxValue, // the maximum number of times to fail.
            OnTheFlyDownload = false, // caching in-memory mode
            Timeout = 10000, // timeout (millisecond) per stream block reader
            TempDirectory = Path.GetTempPath(), // this is the library default
            RequestConfiguration = new RequestConfiguration
            {
                UserAgent = Constants.PatcherUserAgent,
                Accept = "*/*"
            },
            //MaximumBytesPerSecond = App.Settings.SpeedLimitBytes / PatchManager.MAX_DOWNLOADS_AT_ONCE,
        };

        public NetDownloaderPatchAcquisition(DirectoryInfo patchStore, long maxBytesPerSecond)
        {
            this._patchStore = patchStore;

            this._downloadOpt.TempDirectory = this.DownloadTempPath;
        }

        public override async Task StartDownloadAsync(string url, FileInfo outFile)
        {
            _dlService = new DownloadService(_downloadOpt);

            _dlService.DownloadProgressChanged += (sender, args) =>
            {
                OnProgressChanged(new AcquisitionProgress
                {
                    BytesPerSecondSpeed = (long) args.BytesPerSecondSpeed,
                    Progress = args.ReceivedBytesSize
                });
            };

            _dlService.DownloadFileCompleted += (sender, args) =>
            {
                if (args.Error != null)
                {
                    Log.Error(args.Error, "[WEB] Download failed for {0} with reason {1}", url, args.Error);

                    // If we cancel downloads, we don't want to see an error message
                    if (args.Error is OperationCanceledException)
                    {
                        OnComplete(AcquisitionResult.Cancelled);
                        return;
                    }

                    OnComplete(AcquisitionResult.Error);
                    return;
                }

                if (args.Cancelled)
                {
                    Log.Error("[WEB] Download cancelled for {0} with reason {1}", url, args.Error);

                    /*
                    Cancellation should not produce an error message, since it is always triggered by another error or the user.
                    */
                    OnComplete(AcquisitionResult.Cancelled);
                    return;
                }

                OnComplete(AcquisitionResult.Success);
            };

            await _dlService.DownloadFileTaskAsync(url, outFile.FullName);
        }

        public override async Task CancelAsync()
        {
            this._dlService.CancelAsync();
        }
    }
}
﻿namespace XIVLauncher.Common.Game.Patch.Acquisition
{
    public enum AcquisitionResult
    {
        Success,
        Error,
        Cancelled,
    }
}
﻿namespace XIVLauncher.Common.Game.Patch.Acquisition
{
    public class AcquisitionProgress
    {
        public long Progress { get; set; }
        public long BytesPerSecondSpeed { get; set; }
    }
}﻿using LibDalamud;

namespace XIVLauncher.Common.Game.Patch.Acquisition
{
    public enum AcquisitionMethod
    {
        [SettingsDescription(".NET", "Basic .NET downloads")]
        NetDownloader,

        [SettingsDescription("Torrent (+ .NET)", "Torrent downloads, with .NET as a fallback")]
        MonoTorrentNetFallback,

        [SettingsDescription("Torrent (+ Aria)", "Torrent downloads, with Aria as a fallback")]
        MonoTorrentAriaFallback,

        [SettingsDescription("Aria2c", "Aria2c downloads (recommended)")]
        Aria,
    }
}﻿/**
 * This file is part of AriaNet by huming2207, licensed under the CC-BY-NC-SA 3.0 Australian Licence.
 * You can find the original code in this GitHub repository: https://github.com/huming2207/AriaNet
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using AriaNet.Attributes;
using XIVLauncher.Common.Game.Patch.Acquisition.Aria.JsonRpc;

namespace AriaNet
{
    public class AriaManager
    {
        private readonly JsonRpcHttpClient rpcClient;
        private readonly string secret;
        
        public AriaManager(string secret, string rpcUrl = "http://localhost:6800/jsonrpc")
        {
            this.secret = secret;
            this.rpcClient = new JsonRpcHttpClient(rpcUrl);
        }

        private async Task<T> Invoke<T>(string method, params object[] arguments)
        {
            var args = new object[arguments.Length + 1];
            args[0] = $"token:{this.secret}";
            Array.Copy(arguments, 0, args, 1, arguments.Length);

            return await this.rpcClient.Invoke<T>(method, args);
        }

        public async Task<string> AddUri(List<string> uriList)
        {
            return await Invoke<string>("aria2.addUri", uriList);
        }

        public async Task<string> AddUri(List<string> uriList, string userAgent, string referrer)
        {
            return await Invoke<string>("aria2.addUri", uriList,
                new Dictionary<string, string>
                {
                    {"user-agent", userAgent},
                    {"referer", referrer}
                });
        }

        public async Task<string> AddUri(List<string> uriList, Dictionary<string, string> options)
        {
            return await Invoke<string>("aria2.addUri", uriList, options);
        }

        public async Task<string> AddMetaLink(string filePath)
        {
            var metaLinkBase64 = Convert.ToBase64String(File.ReadAllBytes(filePath));
            return await Invoke<string>("aria2.addMetalink", metaLinkBase64);
        }
        
        public async Task<string> AddTorrent(string filePath)
        {
            var torrentBase64 = Convert.ToBase64String(File.ReadAllBytes(filePath));
            return await Invoke<string>("aria2.addTorrent", torrentBase64);
        }

        public async Task<string> RemoveTask(string gid, bool forceRemove = false)
        {
            if (!forceRemove)
            {
                return await Invoke<string>("aria2.remove", gid);
            }
            else
            {
                return await Invoke<string>("aria2.forceRemove", gid);
            }
        }

        public async Task<string> PauseTask(string gid, bool forcePause = false)
        {
            if (!forcePause)
            {
                return await Invoke<string>("aria2.pause", gid);
            }
            else
            {
                return await Invoke<string>("aria2.forcePause", gid);
            }
        }

        public async Task<bool> PauseAllTasks()
        {
            return (await Invoke<string>("aria2.pauseAll")).Contains("OK");
        }
        
        public async Task<bool> UnpauseAllTasks()
        {
            return (await Invoke<string>("aria2.unpauseAll")).Contains("OK");
        }

        public async Task<string> UnpauseTask(string gid)
        {
            return await Invoke<string>("aria2.unpause", gid);
        }

        public async Task<AriaStatus> GetStatus(string gid)
        {
            return await Invoke<AriaStatus>("aria2.tellStatus", gid);
        }

        public async Task<AriaUri> GetUris(string gid)
        {
            return await Invoke<AriaUri>("aria2.getUris", gid);
        }

        public async Task<AriaFile> GetFiles(string gid)
        {
            return await Invoke<AriaFile>("aria2.getFiles", gid);
        }

        public async Task<AriaTorrent> GetPeers(string gid)
        {
            return await Invoke<AriaTorrent>("aria2.getPeers", gid);
        }

        public async Task<AriaServer> GetServers(string gid)
        {
            return await Invoke<AriaServer>("aria2.getServers", gid);
        }
        
        public async Task<AriaStatus> GetActiveStatus(string gid)
        {
            return await Invoke<AriaStatus>("aria2.tellActive", gid);
        }
        public async Task<AriaOption> GetOption(string gid)
        {
            return await Invoke<AriaOption>("aria2.getOption", gid);
        }


        public async Task<bool> ChangeOption(string gid, AriaOption option)
        {
            return (await Invoke<string>("aria2.changeOption", gid, option))
                .Contains("OK");
        }
        
        public async Task<AriaOption> GetGlobalOption()
        {
            return await Invoke<AriaOption>("aria2.getGlobalOption");
        }
        
        public async Task<bool> ChangeGlobalOption(AriaOption option)
        {
            return (await Invoke<string>("aria2.changeGlobalOption", option))
                .Contains("OK");
        }

        public async Task<AriaGlobalStatus> GetGlobalStatus()
        {
            return await Invoke<AriaGlobalStatus>("aria2.getGlobalStat");
        }

        public async Task<bool> PurgeDownloadResult()
        {
            return (await Invoke<string>("aria2.purgeDownloadResult")).Contains("OK");
        }
        
        public async Task<bool> RemoveDownloadResult(string gid)
        {
            return (await Invoke<string>("aria2.removeDownloadResult", gid))
                .Contains("OK");
        }

        public async Task<AriaVersionInfo> GetVersion()
        {
            return await Invoke<AriaVersionInfo>("aria2.getVersion");
        }
        
        public async Task<AriaSession> GetSessionInfo()
        {
            return await Invoke<AriaSession>("aria2.getSessionInfo");
        }

        public async Task<bool> Shutdown(bool forceShutdown = false)
        {
            if (!forceShutdown)
            {
                return (await Invoke<string>("aria2.shutdown")).Contains("OK");
            }
            else
            {
                return (await Invoke<string>("aria2.forceShutdown")).Contains("OK");
            }
        }

        public async Task<bool> SaveSession()
        {
            return (await Invoke<string>("aria2.saveSession")).Contains("OK");
        }
    }
}﻿using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using AriaNet;
using LibDalamud;
using LibDalamud.Common.Util;
using Serilog;
using XIVLauncher.Common.Util;

namespace XIVLauncher.Common.Game.Patch.Acquisition.Aria
{
    public class AriaHttpPatchAcquisition : PatchAcquisition
    {
        private static Process ariaProcess;
        private static AriaManager manager;
        private static long maxDownloadSpeed;

        public static async Task InitializeAsync(long maxDownloadSpeed, FileInfo logFile)
        {
            AriaHttpPatchAcquisition.maxDownloadSpeed = maxDownloadSpeed;

            if (ariaProcess == null || ariaProcess.HasExited)
            {
                // Kill stray aria2c-xl processes
                var stray = Process.GetProcessesByName("aria2c-xl");

                foreach (var process in stray)
                {
                    try
                    {
                        process.Kill();
                    }
                    catch (Exception ex)
                    {
                        Log.Error(ex, "[ARIA] Could not kill stray process.");
                    }
                }

                // I don't really see the point of this, but aria complains if we don't provide a secret
                var rng = new Random();
                var secret = BitConverter.ToString(MD5.Create().ComputeHash(Encoding.UTF8.GetBytes($"{rng.Next()}{rng.Next()}{rng.Next()}{rng.Next()}")));

                var ariaPath = Path.Combine(Paths.ResourcesPath, "aria2c-xl.exe");

                if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))
                {
                    ariaPath = "aria2c";
                }

                var ariaPort = PlatformHelpers.GetAvailablePort();
                var ariaHost = $"http://localhost:{ariaPort}/jsonrpc";

                var ariaArgs =
                    $"--enable-rpc --rpc-secret={secret} --rpc-listen-port={ariaPort} --log=\"{logFile.FullName}\" --log-level=notice --max-connection-per-server=8 --auto-file-renaming=false --allow-overwrite=true";

                Log.Verbose($"[ARIA] Aria process not there, creating from {ariaPath} {ariaArgs}...");

                var startInfo = new ProcessStartInfo(ariaPath, ariaArgs)
                {
#if !DEBUG
                    CreateNoWindow = true,
                    WindowStyle = ProcessWindowStyle.Hidden,
#endif
                    UseShellExecute = false,
                };

                ariaProcess = Process.Start(startInfo);

                Thread.Sleep(400);

                if (ariaProcess == null)
                    throw new Exception("ariaProcess was null.");

                if (ariaProcess.HasExited)
                    throw new Exception("ariaProcess has exited.");

                manager = new AriaManager(secret, ariaHost);
            }
        }

        public static async Task UnInitializeAsync()
        {
            if (ariaProcess is {HasExited: false})
            {
                try
                {
                    await manager.Shutdown();
                }
                catch (Exception)
                {
                    // ignored
                }

                Thread.Sleep(1000);

                if (!ariaProcess.HasExited)
                    ariaProcess.Kill();
            }
        }

        public override async Task StartDownloadAsync(string url, FileInfo outFile)
        {
            await manager.AddUri(new List<string>()
            {
                url
            }, new Dictionary<string, string>()
            {
                {"user-agent", Constants.PatcherUserAgent},
                {"out", outFile.Name},
                {"dir", outFile.Directory.FullName},
                {"max-connection-per-server", "8"},
                {"max-tries", "100"},
                {"max-download-limit", maxDownloadSpeed.ToString()},
                {"auto-file-renaming", "false"},
                {"allow-overwrite", "true"},
            }).ContinueWith(t =>
            {
                if (t.IsFaulted || t.IsCanceled)
                {
                    Log.Error(t.Exception, $"[ARIA] Could not send download RPC for {url}");
                    OnComplete(AcquisitionResult.Error);
                    return;
                }

                var gid = t.Result;

                Log.Verbose($"[ARIA] GID# {gid} for {url}");

                var _ = Task.Run(async () =>
                {
                    while (true)
                    {
                        try
                        {
                            var status = await manager.GetStatus(gid);

                            if (status.Status == "complete")
                            {
                                Log.Verbose($"[ARIA] GID# {gid} for {url} SUCCESS");

                                OnComplete(AcquisitionResult.Success);
                                return;
                            }

                            if (status.Status == "removed")
                            {
                                Log.Verbose($"[ARIA] GID# {gid} for {url} CANCEL");

                                OnComplete(AcquisitionResult.Cancelled);
                                return;
                            }

                            if (status.Status == "error")
                            {
                                Log.Verbose($"[ARIA] GID# {gid} for {url} FAULTED");

                                OnComplete(AcquisitionResult.Error);
                                return;
                            }

                            OnProgressChanged(new AcquisitionProgress
                            {
                                BytesPerSecondSpeed = long.Parse(status.DownloadSpeed),
                                Progress = long.Parse(status.CompletedLength),
                            });
                        }
                        catch (Exception ex)
                        {
                            Log.Error(ex, $"[ARIA] Failed to get status for GID# {gid} ({url})");
                        }

                        Thread.Sleep(500);
                    }
                });
            });
        }

        public override async Task CancelAsync()
        {
            await manager.PauseAllTasks();
        }
    }
}﻿using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Serilog;

namespace XIVLauncher.Common.Game.Patch.Acquisition.Aria.JsonRpc
{
    /// <summary>
    /// Bodge JSON-RPC 2.0 http client implementation
    /// </summary>
    public class JsonRpcHttpClient
    {
        private readonly string _endpoint;
        private readonly HttpClient _client;

        public JsonRpcHttpClient(string endpoint)
        {
            _endpoint = endpoint;
            _client = new HttpClient
            {
                Timeout = new TimeSpan(0, 5, 0)
            };
        }

        private static string Base64Encode(string plainText) {
            var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
            return Convert.ToBase64String(plainTextBytes);
        }

        public async Task<T> Invoke<T>(string method, params object[] args)
        {
            var argsJson = JsonConvert.SerializeObject(args);
            Log.Debug($"[JSONRPC] method({method}) arg({argsJson})");

            var httpResponse = await _client.GetAsync(_endpoint + $"?method={method}&id={Guid.NewGuid()}&params={Base64Encode(argsJson)}");
            httpResponse.EnsureSuccessStatusCode();

            var rpcResponse = JsonConvert.DeserializeObject<JsonRpcResponse<T>>(await httpResponse.Content.ReadAsStringAsync());
            return rpcResponse.Result;
        }
    }
}   
﻿using Newtonsoft.Json;

namespace XIVLauncher.Common.Game.Patch.Acquisition.Aria.JsonRpc
{
    public class JsonRpcResponse<T>
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("jsonrpc")]
        public string Version { get; set; }

        [JsonProperty("result")]
        public T Result { get; set; }
    }
}
﻿using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class BinaryNotPresentException : Exception
{
    public string Path { get; private set; }

    public BinaryNotPresentException(string path)
        : base("Game binary was not found")
    {
        this.Path = path;
    }
}﻿using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class GameExitedException : Exception
{
    public GameExitedException()
        : base("Game exited prematurely.")
    {
    }
}using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class InvalidResponseException : Exception
{
    public string Document { get; set; }

    public InvalidResponseException(string message, string document)
        : base(message)
    {
        this.Document = document;
    }
}using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class InvalidVersionFilesException : Exception
{
    public InvalidVersionFilesException()
        : base("Version files are invalid.")
    {
    }
}using LibDalamud;
using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class NoVersionReferenceException : Exception
{
    public NoVersionReferenceException(Repository repo, string version)
        : base($"No version reference found for {repo}({version})")
    {
    }
}﻿using System;
using System.Text.RegularExpressions;
using Serilog;

namespace XIVLauncher.Common.Game.Exceptions;

[Serializable]
public class OauthLoginException : Exception
{
    private static Regex errorMessageRegex =
        new(@"window.external.user\(""login=auth,ng,err,(?<errorMessage>.*)\""\);", RegexOptions.Compiled | RegexOptions.CultureInvariant);

    public string? OauthErrorMessage { get; private set; }

    public OauthLoginException(string document)
        : base(GetErrorMessage(document) ?? "Unknown error")
    {
        this.OauthErrorMessage = GetErrorMessage(document);
    }

    private static string? GetErrorMessage(string document)
    {
        var matches = errorMessageRegex.Matches(document);

        if (matches.Count is 0 or > 1)
        {
            Log.Error("Could not get login error\n{Doc}", document);
            return null;
        }

        return matches[0].Groups["errorMessage"].Value;
    }
}using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class SteamException : Exception
{
    public SteamException(string message, Exception innerException = null)
        : base(message, innerException)
    {
    }
}﻿using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class SteamLinkNeededException : Exception
{
    public SteamLinkNeededException()
        : base("No steam account linked.")
    {
    }
}﻿using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class SteamWrongAccountException : Exception
{
    public SteamWrongAccountException(string chosenUserName, string imposedUserName)
        : base($"Wrong username! chosen: {chosenUserName}, imposed: {imposedUserName}")
    {
    }
}   ﻿using System;

namespace XIVLauncher.Common.Game.Exceptions;

public class SteamWrongAccountException : Exception
{
    public SteamWrongAccountException(string chosenUserName, string imposedUserName)
        : base($"Wrong username! chosen: {chosenUserName}, imposed: {imposedUserName}")
    {
    }
}﻿using System;
using System.Collections.Generic;

namespace XIVLauncher.Common.Encryption
{
    public class LegacyBlowfish
    {
        #region P-Array and S-Boxes

        private readonly uint[] p =
        {
            0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0,
            0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c,
            0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b
        };

        private readonly uint[,] s =
        {
            {
                0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96,
                0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16,
                0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658,
                0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
                0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e,
                0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60,
                0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6,
                0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
                0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c,
                0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193,
                0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1,
                0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
                0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a,
                0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3,
                0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176,
                0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
                0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706,
                0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b,
                0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b,
                0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
                0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c,
                0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3,
                0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a,
                0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
                0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760,
                0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db,
                0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8,
                0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
                0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33,
                0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4,
                0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0,
                0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
                0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777,
                0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299,
                0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705,
                0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
                0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e,
                0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa,
                0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9,
                0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
                0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f,
                0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664,
                0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a
            },
            {
                0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d,
                0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1,
                0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65,
                0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
                0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9,
                0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737,
                0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d,
                0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
                0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc,
                0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41,
                0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908,
                0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
                0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124,
                0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c,
                0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908,
                0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
                0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b,
                0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e,
                0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa,
                0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
                0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d,
                0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66,
                0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5,
                0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
                0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96,
                0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14,
                0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca,
                0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
                0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77,
                0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99,
                0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054,
                0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
                0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea,
                0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105,
                0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646,
                0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
                0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea,
                0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb,
                0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e,
                0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
                0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd,
                0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20,
                0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7
            },
            {
                0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7,
                0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af,
                0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af,
                0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
                0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4,
                0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee,
                0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec,
                0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
                0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332,
                0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527,
                0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58,
                0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
                0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22,
                0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17,
                0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60,
                0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
                0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99,
                0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0,
                0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74,
                0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
                0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3,
                0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3,
                0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979,
                0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
                0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa,
                0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a,
                0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086,
                0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
                0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24,
                0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2,
                0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84,
                0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
                0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09,
                0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10,
                0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe,
                0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
                0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0,
                0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634,
                0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188,
                0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
                0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8,
                0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837,
                0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0
            },
            {
                0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742,
                0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b,
                0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79,
                0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
                0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a,
                0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4,
                0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1,
                0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
                0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797,
                0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28,
                0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6,
                0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
                0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba,
                0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a,
                0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5,
                0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
                0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce,
                0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680,
                0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd,
                0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
                0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb,
                0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370,
                0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc,
                0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
                0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc,
                0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9,
                0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a,
                0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
                0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a,
                0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1,
                0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b,
                0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
                0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e,
                0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f,
                0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623,
                0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
                0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a,
                0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6,
                0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3,
                0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
                0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c,
                0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f,
                0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
            }
        };

        #endregion

        private static readonly int Rounds = 16;

        /// <summary>
        /// Initialize a new blowfish.
        /// </summary>
        /// <param name="key">The key to use.</param>
        /// <param name="fucked">Whether or not a sign confusion should be introduced during key init. This is needed for SE's implementation of blowfish.</param>
        public LegacyBlowfish(byte[] key)
        {
            foreach (var (i, keyFragment) in WrappingUInt32(key, this.p.Length))
                this.p[i] ^= keyFragment;

            uint l = 0, r = 0;
            for (int i = 0; i < this.p.Length; i += 2)
                (l, r) = (this.p[i], this.p[i + 1]) = Encrypt(l, r);

            for (int i = 0; i < this.s.GetLength(0); i++)
                for (int j = 0; j < this.s.GetLength(1); j += 2)
                    (l, r) = (this.s[i, j], this.s[i, j + 1]) = Encrypt(l, r);
        }

        public byte[] Encrypt(byte[] data)
        {
            var paddedLength = data.Length % 8 == 0 ? data.Length : data.Length + (8 - (data.Length % 8));
            var buffer = new byte[paddedLength];
            Buffer.BlockCopy(data, 0, buffer, 0, data.Length);

            for (int i = 0; i < paddedLength; i += 8)
            {
                var (l, r) = Encrypt(BitConverter.ToUInt32(buffer, i), BitConverter.ToUInt32(buffer, i + 4));
                CopyUInt32IntoArray(buffer, l, i);
                CopyUInt32IntoArray(buffer, r, i + 4);
            }

            return buffer;
        }

        public void Decrypt(ref byte[] data)
        {
            for (int i = 0; i < data.Length; i += 8)
            {
                var (l, r) = Decrypt(BitConverter.ToUInt32(data, i), BitConverter.ToUInt32(data, i + 4));
                CopyUInt32IntoArray(data, l, i);
                CopyUInt32IntoArray(data, r, i + 4);
            }
        }

        private static void CopyUInt32IntoArray(byte[] dest, uint val, int offset)
        {
            dest[offset] = (byte)(val & 0xFF);
            dest[offset + 1] = (byte)((val >> 8) & 0xFF);
            dest[offset + 2] = (byte)((val >> 16) & 0xFF);
            dest[offset + 3] = (byte)((val >> 24) & 0xFF);
        }

        private uint F(uint i)
        {
            return ((this.s[0, i >> 24]
                     + this.s[1, (i >> 16) & 0xFF])
                    ^ this.s[2, (i >> 8) & 0xFF])
                   + this.s[3, i & 0xFF];
        }

        private (uint, uint) Encrypt(uint l, uint r)
        {
            for (int i = 0; i < Rounds; i += 2)
            {
                l ^= this.p[i];
                r ^= F(l);
                r ^= this.p[i + 1];
                l ^= F(r);
            }

            return (r ^ this.p[17], l ^ this.p[16]);
        }

        private (uint, uint) Decrypt(uint l, uint r)
        {
            for (int i = Rounds; i > 0; i -= 2)
            {
                l ^= this.p[i + 1];
                r ^= F(l);
                r ^= this.p[i];
                l ^= F(r);
            }

            return (r ^ this.p[0], l ^ this.p[1]);
        }

        private static IEnumerable<TSource> Cycle<TSource>(IEnumerable<TSource> source)
        {
            while (true)
                foreach (TSource t in source)
                    yield return t;
        }

        private IEnumerable<(int, uint)> WrappingUInt32(IEnumerable<byte> source, int count)
        {
            var enumerator = Cycle(source).GetEnumerator();

            for (int i = 0; i < count; i++)
            {
                var n = 0u;

                for (var j = 0; j < 4 && enumerator.MoveNext(); j++)
                {
                    n = (uint)((n << 8) | (sbyte)enumerator.Current); // NOTE(goat): THIS IS A BUG! SE's implementation wrongly uses signed numbers for this, so we need to as well.
                }

                yield return (i, n);
            }
        }
    }
}﻿namespace XIVLauncher.Common.Encryption;

public class CrtRand
{
    private uint seed;

    public CrtRand(uint seed)
    {
        this.seed = seed;
    }

    public uint Next()
    {
        this.seed = 0x343FD * this.seed + 0x269EC3;
        return ((this.seed >> 16) & 0xFFFF) & 0x7FFF;
    }
}﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Serilog;
using XIVLauncher.Common.Util;
using System.Runtime.InteropServices;

namespace XIVLauncher.Common.Encryption
{
    public sealed class ArgumentBuilder
    {
        private static readonly uint version = 3;

        private static readonly char[] checksumTable =
        {
            'f', 'X', '1', 'p', 'G', 't', 'd', 'S',
            '5', 'C', 'A', 'P', '4', '_', 'V', 'L'
        };

        private static char DeriveChecksum(uint key)
        {
            var index = (key & 0x000F_0000) >> 16;

            try
            {
                return checksumTable[index];
            }
            catch (IndexOutOfRangeException)
            {
                return '!'; // Conceivably, this shouldn't happen...
            }
        }

        private readonly List<KeyValuePair<string, string>> arguments;

        public ArgumentBuilder()
        {
            this.arguments = new List<KeyValuePair<string, string>>();
        }

        public ArgumentBuilder(IEnumerable<KeyValuePair<string, string>> items)
        {
            this.arguments = new List<KeyValuePair<string, string>>(items);
        }

        public ArgumentBuilder Append(string key, string value)
        {
            return Append(new KeyValuePair<string, string>(key, value));
        }

        public ArgumentBuilder Append(KeyValuePair<string, string> item)
        {
            this.arguments.Add(item);

            return this;
        }

        public ArgumentBuilder Append(IEnumerable<KeyValuePair<string, string>> items)
        {
            this.arguments.AddRange(items);

            return this;
        }

        public string Build()
        {
            return this.arguments.Aggregate(new StringBuilder(),
                           (whole, part) => whole.Append($" {part.Key}={part.Value}"))
                       .ToString();
        }

        public string BuildEncrypted(uint key)
        {
            var arguments = this.arguments.Aggregate(new StringBuilder(),
                                    // Yes, they do have a space prepended even for the first argument.
                                    (whole, part) => whole.Append($" /{EscapeValue(part.Key)} ={EscapeValue(part.Value)}"))
                                .ToString();

            var blowfish = new LegacyBlowfish(GetKeyBytes(key));
            var ciphertext = blowfish.Encrypt(Encoding.UTF8.GetBytes(arguments));
            var base64Str = GameHelpers.ToMangledSeBase64(ciphertext);
            var checksum = DeriveChecksum(key);

            Log.Information("ArgumentBuilder::BuildEncrypted() checksum:{0}", checksum);

            return $"//**sqex{version:D04}{base64Str}{checksum}**//";
        }

        public string BuildEncrypted()
        {
            var key = DeriveKey();

            return BuildEncrypted(key);
        }

        private uint DeriveKey()
        {
            var rawTickCount = (uint)Environment.TickCount;

            if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
            {
                [System.Runtime.InteropServices.DllImport("c")]
                // ReSharper disable once InconsistentNaming
                static extern ulong clock_gettime_nsec_np(int clock_id);

                const int CLOCK_MONOTONIC_RAW = 4;
                var rawTickCountFixed = (clock_gettime_nsec_np(CLOCK_MONOTONIC_RAW) / 1000000);
                Log.Information("ArgumentBuilder::DeriveKey() fixing up rawTickCount from {0} to {1} on macOS", rawTickCount, rawTickCountFixed);
                rawTickCount = (uint)rawTickCountFixed;
            }

            var ticks = rawTickCount & 0xFFFF_FFFFu;
            var key = ticks & 0xFFFF_0000u;

            Log.Information("ArgumentBuilder::DeriveKey() rawTickCount:{0} ticks:{1} key:{2}", rawTickCount, ticks, key);

            var keyPair = new KeyValuePair<string, string>("T", Convert.ToString(ticks));
            if (this.arguments.Count > 0 && this.arguments[0].Key == "T")
                this.arguments[0] = keyPair;
            else
                this.arguments.Insert(0, keyPair);

            return key;
        }

        private static byte[] GetKeyBytes(uint key)
        {
            var format = $"{key:x08}";

            return Encoding.UTF8.GetBytes(format);
        }

        private static string EscapeValue(string input)
        {
            return input.Replace(" ", "  ");
        }
    }

